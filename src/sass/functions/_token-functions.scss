//TODO there might be away to do this more efficiently by iterating through the map to get the deepiest item
//This will go through a nested map and grab the deepiest property
//STILL NEEDS TESTING
@function get-deepest-token($token, $component, $attribute-type, $component-variant:"", $component-state:"", $attribute){
    @if type-of($token) != 'map' {
      @error 'The argument $map: `#{$map}` is of incorrect type: `#{type-of($map)}`. Type of `Map` is required!';
    }
  
    @if deep-map-check($token, $component, $attribute-type, $component-variant, $component-state, $attribute){
      @return map-get-deep($token, $component, $attribute-type, $component-variant, $component-state, $attribute);
    }
  
    @if deep-map-check($token, $component, $attribute-type, $component-variant, $attribute){
      @return map-get-deep($token, $component, $attribute-type, $component-variant, $attribute);
    }
  
    @if deep-map-check($token, $component, $attribute-type, $attribute){
      @return map-get-deep($token, $component, $attribute-type, $attribute);
    }
  };
  


//Function for grabbing color
@function u-get-color($color)
{
  @return map-get-deep($tokens,"color",#{$color}); 
};


//Typography

@function u-get-font-size($fontSize)
{
  @return map-get-deep($tokens,"font","size", #{$fontSize});  //have to use interpolation for numbers
};

@function u-get-line-height($fontSize)
{
  @return map-get-deep($tokens,"font","line-height", #{$fontSize});  //have to use interpolation for numbers
};
