// ----------------------------------------------------------------------
////
/// @group Color
////

/// @return {color} - Color Value
/// @example scss SCSS
/// .foo {
///   color: cds-get-color("costco-blue")
/// }
/// @example css Rendered
/// .foo {
///   color: #005dab;
/// }
@function cds-get-color($variant, $attribute: null) {
  @if ($attribute == null) {
    @return map-get-deep($cds-tokens, "color", #{$variant});
  } @else {
    @return map-get-deep($cds-tokens, "color", #{$attribute}, #{$variant});
  }
}

//Color Mixins

/// @param {String} $variant - Variant Key (check tokens for full list)
/// @param {String} $attribute [null] - Attribute.
/// If attribute param is not used, then it is a base key (contextless).
/// @param {Bool} $important [false] - Add !important
/// @example scss
/// .foo {
///   @include cds-color-text(costco-blue);
///  }
/// @example css Rendered
/// .foo {
///   color: #005dab;
/// }
@mixin cds-color-text($variant, $important: null, $attribute: null) {
  @if ($important == true) {
    color: cds-get-color($variant, $attribute) !important;
  } @else {
    color: cds-get-color($variant, $attribute);
  }
}

/// @param {String} $variant - Variant Key (check tokens for full list)
/// @param {String} $attribute [null] - Attribute.
/// If attribute param is not used, then it is a base key (contextless).
/// @param {Bool} $important [false] - Add !important
/// @example scss
/// .foo {
///   @include cds-color-bg(costco-blue);
///  }
/// @example css Rendered
/// .foo {
///   background-color: #005dab;
/// }
@mixin cds-color-bg($variant, $important: null, $attribute: null) {
  @if ($important == true) {
    background-color: cds-get-color($variant, $attribute) !important;
  } @else {
    background-color: cds-get-color($variant, $attribute);
  }
}

/// @param {String} $variant - Variant Key (check tokens for full list)
/// @param {String} $attribute [null] - Attribute.
/// If attribute param is not used, then it is a base key (contextless).
/// @param {Bool} $important [false] - Add !important
/// @example scss
/// .foo {
///   @include cds-color-border(costco-blue);
///  }
/// @example css Rendered
/// .foo {
///   border-color: #005dab;
/// }
@mixin cds-color-border($variant, $important: null, $attribute: null) {
  @if ($important == true) {
    border-color: cds-get-color($variant, $attribute) !important;
  } @else {
    border-color: cds-get-color($variant, $attribute);
  }
}

//Color Utilities
//TODO Add to docs

$color-map: map-get-deep($cds-tokens, "color");
$color-text-map: map-get-deep(
  $cds-tokens,
  "color",
  "text"
); //TODO refactor to not have to use this.



@each $name, $color in $color-map {
  @if (type-of($color) != map) {
    .cds-u-color-text-#{$name} {
      @include cds-color-text($name, true);
    }

    .cds-u-color-bg-#{$name} {
      @include cds-color-bg($name, true);
    }

    .cds-u-color-border-#{$name} {
      @include cds-color-border($name, true);
    }
  } @else if (type-of($color) == map) {
    @each $inner-name, $inner-color in $color-text-map {
      .cds-u-color-text-#{$inner-name} {
        @include cds-color-text($inner-name, true, $name);
      }
    }
  }
}
