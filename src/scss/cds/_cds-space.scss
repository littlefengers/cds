// Margin auto

// ----------------------------------------------------------------------

////
/// This is a poster comment.
/// It will apply annotations to all items from file.
/// @group Space
/// @param {space} $space - Space Value
////

//Spacing Functions

/// @return {$space} - spacing value
@function get-space($space-size){
  @return map-get-deep($cds-tokens,"space", #{$space-size}); 
};

/// @return {$space} - spacing inset value
@function get-space-inset($space-size){
  @return map-get-deep($cds-tokens,"space", "inset", #{$space-size}); 
};

//Space - Mixins

//Space - Margin Mixins
/// @param {space} $space - Space value (check tokens for full list)
/// @param {important} $important [false] - Add !important
/// @example scss
/// .foo {
///   @include cds-margin-left(md);
///  }
@mixin cds-margin-left($space-size, $important: null) {
  @if ($important == true) {
    margin-left: get-space($space-size) !important;
  } @else {
    margin-left: get-space($space-size);
  }
}

/// @param {space} $space - Space value (check tokens for full list)
/// @param {important} $important [false] - Add !important
/// @example scss
/// .foo {
///   @include cds-margin-right(md);
///  }
@mixin cds-margin-right($space-size, $important: null) {
  @if ($important == true) {
    margin-right: get-space($space-size) !important;
  } @else {
    margin-right: get-space($space-size);
  }
}

/// @param {space} $space - Space value (check tokens for full list)
/// @param {important} $important [false] - Add !important
/// @example scss
/// .foo {
///   @include cds-margin-top(md);
///  }
@mixin cds-margin-top($space-size, $important: null) {
  @if ($important == true) {
    margin-top: get-space($space-size) !important;
  } @else {
    margin-top: get-space($space-size);
  }
}

/// @param {space} $space - Space value (check tokens for full list)
/// @param {important} $important [false] - Add !important
/// @example scss
/// .foo {
///   @include cds-margin-bottom(md);
///  }
@mixin cds-margin-bottom($space-size, $important: null) {
  @if ($important == true) {
    margin-bottom: get-space($space-size) !important;
  } @else {
    margin-bottom: get-space($space-size);
  }
}

/// @param {space} $space - Space value (check tokens for full list)
/// @param {important} $important [false] - Add !important
/// @example scss
/// .foo {
///   @include cds-margin-y(md);
///  }
@mixin cds-margin-y($space-size, $important: null) {
  @if ($important == true) {
    margin-top: get-space($space-size) !important;
    margin-bottom: get-space($space-size) !important;
  } @else {
    margin-top: get-space($space-size);
    margin-bottom: get-space($space-size);
  }
}

/// @param {space} $space - Space value (check tokens for full list)
/// @param {important} $important [false] - Add !important
/// @example scss
/// .foo {
///   @include cds-margin-x(md);
///  }
@mixin cds-margin-x($space-size, $important: null) {
  @if ($important == true) {
    margin-left: get-space($space-size) !important;
    margin-right: get-space($space-size) !important;
  } @else {
    margin-left: get-space($space-size);
    margin-right: get-space($space-size);
  }
}

//Space - Padding Mixins
/// @param {space} $space - Space value (check tokens for full list)
/// @param {important} $important [false] - Add !important
/// @example scss
/// .foo {
///   @include cds-padding-left(md);
///  }
@mixin cds-padding-left($space-size, $important: null) {
  @if ($important == true) {
    padding-left: get-space($space-size) !important;
  } @else {
    padding-left: get-space($space-size);
  }
}

/// @param {space} $space - Space value (check tokens for full list)
/// @param {important} $important [false] - Add !important
/// @example scss
/// .foo {
///   @include cds-padding-right(md);
///  }
@mixin cds-padding-right($space-size, $important: null) {
  @if ($important == true) {
    padding-right: get-space($space-size) !important;
  } @else {
    padding-right: get-space($space-size);
  }
}

/// @param {space} $space - Space value (check tokens for full list)
/// @param {important} $important [false] - Add !important
/// @example scss
/// .foo {
///   @include cds-padding-top(md);
///  }
@mixin cds-padding-top($space-size, $important: null) {
  @if ($important == true) {
    padding-top: get-space($space-size) !important;
  } @else {
    padding-top: get-space($space-size);
  }
}

/// @param {space} $space - Space value (check tokens for full list)
/// @param {important} $important [false] - Add !important
/// @example scss
/// .foo {
///   @include cds-padding-bottom(md);
///  }
@mixin cds-padding-bottom($space-size, $important: null) {
  @if ($important == true) {
    padding-bottom: get-space($space-size) !important;
  } @else {
    padding-bottom: get-space($space-size);
  }
}

/// @param {space} $space - Space value (check tokens for full list)
/// @param {important} $important [false] - Add !important
/// @example scss
/// .foo {
///   @include cds-padding-y(md);
///  }
@mixin cds-padding-y($space-size, $important: null) {
  @if ($important == true) {
    padding-top: get-space($space-size) !important;
    padding-bottom: get-space($space-size) !important;
  } @else {
    padding-top: get-space($space-size);
    padding-bottom: get-space($space-size);
  }
}

/// @param {space} $space - Space value (check tokens for full list)
/// @param {important} $important [false] - Add !important
/// @example scss
/// .foo {
///   @include cds-padding-x(md);
///  }
@mixin cds-padding-x($space-size, $important: null) {
  @if ($important == true) {
    padding-left: get-space($space-size) !important;
    padding-right: get-space($space-size) !important;
  } @else {
    padding-left: get-space($space-size);
    padding-right: get-space($space-size);
  }
}

//Space - Inset

/// @param {space} $space - Space value (check tokens for full list)
/// @param {important} $important [false] - Add !important
/// @example scss
/// .foo {
///   @include cds-padding-inset(md);
///  }
@mixin cds-padding-inset($space-size, $important: null) {
    @if ($important == true) {
      padding: get-space-inset($space-size) !important;
    } @else {
      padding: get-space-inset($space-size);
    }
}

//Space Utilities

$space-map: map-get-deep($cds-tokens, "space");
@each $name, $space in $space-map {
  @if (type-of($space) != map) {
    //Padding

    .cds-u-space-pl-#{$name} {
      @include cds-padding-left($name, true);
    }

    .cds-u-space-pr-#{$name} {
      @include cds-padding-right($name, true);
    }

    .cds-u-space-pt-#{$name} {
      @include cds-padding-top($name, true);
    }
    .cds-u-space-pb-#{$name} {
      @include cds-padding-bottom($name, true);
    }

    .cds-u-space-py-#{$name} {
      @include cds-padding-y($name, true);
    }

    .cds-u-space-px-#{$name} {
      @include cds-padding-x($name, true);
    }

    //Margin

    .cds-u-space-ml-#{$name} {
      @include cds-margin-left($name, true);
    }

    .cds-u-space-mr-#{$name} {
      @include cds-margin-right($name, true);
    }

    .cds-u-space-mt-#{$name} {
      @include cds-margin-top($name, true);
    }

    .cds-u-space-mb-#{$name} {
      @include cds-margin-bottom($name, true);
    }
    .cds-u-space-my-#{$name} {
      @include cds-margin-y($name, true);
    }
    .cds-u-space-mx-#{$name} {
      @include cds-margin-x($name, true);
    }
  }
}

$space-inset-map: map-get-deep($cds-tokens, "space", "inset");

@each $name, $space in $space-inset-map {
    @if (type-of($space) != map) {

      .cds-u-space-inset-#{$name} {
        @include cds-padding-inset($name, true);
      }
    }
  }
